# -*- coding: utf-8 -*-
"""rbf_kernel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hHujY-TLagGYVv08Jw-IyU8ACBxOp05M
"""

import numpy as np
from sklearn import svm, preprocessing
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

X_train = np.load('/content/MNIST/X_train.npy')
y_train = np.load('/content/MNIST/y_train.npy')
X_test = np.load('/content/MNIST/X_test.npy')
y_test = np.load('/content/MNIST/y_test.npy')

sc = preprocessing.StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

pca = PCA(n_components=10)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

svclassifier = svm.SVC(kernel='rbf', gamma=0.01)
svclassifier.fit(X_train_pca, y_train)
train_acc = svclassifier.score(X_train_pca, y_train)
# train_accuracy.append(train_acc)
print('Train accuracy: ', train_acc)

test_acc = svclassifier.score(X_test_pca, y_test)
# test_accuracy.append(test_acc)
print('Test accuracy: ', test_acc)

svclassifier = svm.SVC(kernel='rbf', gamma=0.1)
svclassifier.fit(X_train_pca, y_train)
train_acc = svclassifier.score(X_train_pca, y_train)
# train_accuracy.append(train_acc)
print('Train accuracy: ', train_acc)

test_acc = svclassifier.score(X_test_pca, y_test)
# test_accuracy.append(test_acc)
print('Test accuracy: ', test_acc)

svclassifier = svm.SVC(kernel='rbf', gamma=1)
svclassifier.fit(X_train_pca, y_train)
train_acc = svclassifier.score(X_train_pca, y_train)
# train_accuracy.append(train_acc)
print('Train accuracy: ', train_acc)

test_acc = svclassifier.score(X_test_pca, y_test)
# test_accuracy.append(test_acc)
print('Test accuracy: ', test_acc)

lda = LinearDiscriminantAnalysis(n_components=8)  
X_train_lda = lda.fit_transform(X_train, y_train)
X_test_lda = lda.transform(X_test)

svclassifier = svm.SVC(kernel='rbf', gamma=0.01)
svclassifier.fit(X_train_lda, y_train)
train_acc = svclassifier.score(X_train_lda, y_train)
# train_accuracy.append(train_acc)
print('Train accuracy: ', train_acc)

test_acc = svclassifier.score(X_test_lda, y_test)
# test_accuracy.append(test_acc)
print('Test accuracy: ', test_acc)

svclassifier = svm.SVC(kernel='rbf', gamma=0.1)
svclassifier.fit(X_train_lda, y_train)
train_acc = svclassifier.score(X_train_lda, y_train)
# train_accuracy.append(train_acc)
print('Train accuracy: ', train_acc)

test_acc = svclassifier.score(X_test_lda, y_test)
# test_accuracy.append(test_acc)
print('Test accuracy: ', test_acc)

svclassifier = svm.SVC(kernel='rbf', gamma=1)
svclassifier.fit(X_train_lda, y_train)
train_acc = svclassifier.score(X_train_lda, y_train)
# train_accuracy.append(train_acc)
print('Train accuracy: ', train_acc)

test_acc = svclassifier.score(X_test_lda, y_test)
# test_accuracy.append(test_acc)
print('Test accuracy: ', test_acc)

plt.plot(gamma, train_accuracy, color='b', label='Training accuracy')
plt.plot(gamma, test_accuracy, color='r', label='Test accuracy')
plt.xlabel('Gamma value in RBF Kernel')
plt.ylabel('Accuracy')
plt.title('RBF kernel - LDA(8 discrimninats) - Accuracy vs Gamma')
plt.legend()
# plt.savefig('/content/drive/MyDrive/828C/proj2/part1/plot/linear_kernel_lda.png')
plt.show()